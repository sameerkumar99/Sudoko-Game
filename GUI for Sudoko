#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Jan  3 09:45:44 2020

@author: esameerkumar
"""

import pygame
import time
pygame.font.init()
class Grid:
    board=[
        [7, 8, 0, 4, 0, 0, 1, 2, 0],
        [6, 0, 0, 0, 7, 5, 0, 0, 9],
        [0, 0, 0, 6, 0, 1, 0, 7, 8],
        [0, 0, 7, 0, 4, 0, 2, 6, 0],
        [0, 0, 1, 0, 5, 0, 9, 3, 0],
        [9, 0, 4, 0, 6, 0, 0, 0, 5],
        [0, 7, 0, 3, 0, 0, 0, 1, 2],
        [1, 2, 0, 0, 0, 7, 4, 0, 0],
        [0, 4, 9, 2, 0, 6, 0, 0, 7]
    ]
    def __init__(self,rows,cols,width,height,win):
        self.rows=rows
        self.cols=cols
        self.width=width
        self.height=height
        self.selected=None
        self.cubes=[[Cube(self.board[i][j],i,j,width,height) for j in range(cols)] for i in range(rows)]
        self.model=None
        self.update_model()
        self.win=win
        
    def update_model(self):
        self.model=[[self.cubes[i][j].value for j in range(self.cols)] for i in range(self.rows)]
        
    def place(self,val):
        row,col=self.selected
        if self.cubes[row][col].value==0:
            self.cubes[row][col].set(val)
            self.update_model()
            if valid(self.model,val,(row,col)) and self.solve():
                return True
            else:
                self.cubes[row][col].set(0)
                self.cubes[row][col].set_temp(0)
                self.update_model()
                return False
            
    def sketch(self,val):
        row,col=self.selected
        self.cubes[row][col].set_temp(val)
        
    def draw(self):
        breadth=self.width/9
        for i in range(self.rows+1):
            if i%3==0 and i!=0:
                thickness=4
            else:
                thickness=1
            pygame.draw.line(self.win,(0,0,0),(0,i*breadth),(self.width,i*breadth),thickness)
            pygame.draw.line(self.win,(0,0,0),(i*breadth,0),(i*breadth,self.height),thickness)
        for i in range(self.rows):
            for j in range(self.cols):
                self.cubes[i][j].draw(self.win)
                
    def select(self,row,col):
        for i in range(self.rows):
            for j in range(self.cols):
                self.cubes[i][j].selected=False
        self.cubes[int(row)][int(col)].selected=True
        self.selected=(row,col)
        
    def clear(self):
        row,col=self.selected
        if self.cubes[row][col].value==0:
            self.cubes[row][col].set_temp(0)
            
    def click(self,pos):
        if pos[0]<self.width and pos[1]<self.height:
            breadth=self.width/9
            x=pos[0]//breadth
            y=pos[1]//breadth
            return (y,x)
        return None
    
    def is_finished(self):
        for i in range(self.rows):
            for j in range(self.cols):
                if self.cubes[i][j].value==0:
                    return False
        return True
    
    def solve(self):
        find=find_empty(self.model)
        if not find:
            return True
        row,col=find
        for i in range(1,10):
            if valid(self.model,i,(row,col)):
                self.model[row][col]=i
                if self.solve():
                    return True
                self.model[row][col]=0
        return False
    
    def gui_solve(self):
        find=find_empty(self.model)
        if not find:
            return True
        else:
            row,col=find
        for i in range(1,10):
            if valid(self.model,i,(row,col)):
                self.model[row][col]=i
                self.cubes[row][col].set(i)
                self.cubes[row][col].draw_change(self.win,True)
                self.update_model()
                pygame.display.update()
                pygame.time.delay(100)
                if self.gui_solve():
                    return True
                self.model[row][col]=0
                self.cubes[row][col].set(0)
                self.update_model()
                self.cubes[row][col].draw_change(self.win,False)
                pygame.display.update()
                pygame.time.delay(100)
        return False
    
class Cube:
    rows,cols=9,9
    def __init__(self,value,row,col,width,height):
        self.value=value
        self.row=row
        self.col=col
        self.width=width
        self.height=height
        self.temp=0
        self.selected=False
        
    def draw(self,win):
        fnt=pygame.font.SysFont("comicsans",40)
        breadth=self.width/9
        x,y=self.col*breadth,self.row*breadth
        if self.temp!=0 and self.value==0:
            txt=fnt.render(str(self.temp),1,(128,128,128))
            win.blit(txt,(x+5,y+5))
        elif not (self.value==0):
            txt=fnt.render(str(self.value),1,(0,0,0))
            win.blit(txt,(x+(breadth/2-txt.get_width()/2),y+(breadth/2-txt.get_height()/2)))
        if self.selected:
            pygame.draw.rect(win,(255,0,0),(x,y,breadth,breadth),0)
        
    def draw_change(self,win,g=True):
        fnt=pygame.font.SysFont("comicsans",40)
        gap=self.width/9
        x,y=self.col*gap,self.row*gap
        pygame.draw.rect(win,(255,255,255),(x,y,gap,gap),0)
        txt=fnt.render(str(self.value),1,(0,0,0))
        win.blit(txt,(x+(gap//2-txt.get_width()//2),y+(gap//2-txt.get_height()//2)))
        if g:
            pygame.draw.rect(win,(0,255,0),(x,y,gap,gap),3)
        else:
            pygame.draw.rect(win,(255,0,0),(x,y,gap,gap),3)
        
    def set(self,val):
        self.value=val
    
    def set_temp(self,val):
        self.temp=val
    
def find_empty(board):
    for i in range(len(board)):
        for j in range(len(board[0])):
            if board[i][j]==0:
                return (i,j)
    return None

def valid(board,num,pos):
    x,y=pos
    for i in range(len(board)):
        if board[i][y]==num and i!=x:
            return False
    for i in range(len(board[0])):
        if board[x][i]==num and i!=y:
            return False
    for i in range((x//3)*3,(x//3)*3+3):
        for j in range((y//3)*3,(y//3)*3+3):
            if board[i][j]==num and (i!=x or j!=y):
                return False
    return True

def redraw_window(win,board,time,strikes):
    win.fill((255,255,255))
    fnt=pygame.font.SysFont("comicsans",40)
    text=fnt.render("Time: "+ format_time(time),1,(0,0,0))
    win.blit(text,(540-160,560))
    text=fnt.render("X"*strikes,1,(255,0,0))
    win.blit(text,(20,560))
    board.draw()
    
def format_time(secs):
    sec=secs%60
    minute=secs//60
    hour=minute//60
    mat=" "+str(minute)+":"+str(sec)
    return mat

def main():
    win=pygame.display.set_mode((540,600))
    pygame.display.set_caption("Sudoko")
    board=Grid(9,9,540,540,win)
    key,run=None,True
    start=time.time()
    strikes=0
    while run:
        playtime=round(time.time()-start)
        for event in pygame.event.get():
            if event.type==pygame.QUIT:
                run=False
            if event.type==pygame.KEYDOWN:
                if event.key==pygame.K_1:
                    key=1
                elif event.key==pygame.K_2:
                    key=2
                elif event.key==pygame.K_3:
                    key=3
                elif event.key==pygame.K_4:
                    key=4
                elif event.key==pygame.K_5:
                    key=5
                elif event.key==pygame.K_6:
                    key=6
                elif event.key==pygame.K_7:
                    key=7
                elif event.key==pygame.K_8:
                    key=8
                elif event.key==pygame.K_9:
                    key=9
                if event.key==pygame.K_DELETE:
                    board.clear()
                    key=None
                if event.key==pygame.K_SPACE:
                    board.gui_solve()
                if event.key==pygame.K_RETURN:
                    i,j=board.selected
                    if board.cubes[i][j]!=0:
                        if board.place(board.cubes[i][j].temp):
                            print("Success")
                        else:
                            print("Wrong")
                            strikes+=1
                        key=None
                        if board.is_finished():
                            print("Game Over")
            if event.type==pygame.MOUSEBUTTONDOWN:
                pos=pygame.mouse.get_pos()
                clicked=board.click(pos)
                if clicked:
                    board.select(int(clicked[0]),int(clicked[1]))
                    key=None
        if board.selected and key!=None:
            board.sketch(key)
        redraw_window(win,board,playtime,strikes)
        pygame.display.update()
        
main()
pygame.quit()

                    